import streamlit as st
import fitz  # PyMuPDF for PDF
import pandas as pd
import matplotlib.pyplot as plt
import tempfile, os, zipfile

from docx2pdf import convert as docx2pdf_convert
import mammoth

st.set_page_config(page_title="Chuy·ªÉn File sang ·∫¢nh", layout="wide")
st.title("üìÑ‚û°Ô∏èüñºÔ∏è Chuy·ªÉn file th√†nh ·∫£nh (PNG/JPG)")

col1, col2 = st.columns([2, 1])

with col1:
    uploaded_file = st.file_uploader(
        "T·∫£i l√™n file Word (.docx, .doc), PDF, Excel (.xls, .xlsx)", 
        type=["docx", "doc", "pdf", "xls", "xlsx"],
        help="H·ªó tr·ª£: .docx, .doc, .pdf, .xls, .xlsx"
    )

with col2:
    img_format = st.radio("ƒê·ªãnh d·∫°ng ·∫£nh", ["PNG", "JPG"], horizontal=True)
    dpi = st.slider("Ch·∫•t l∆∞·ª£ng ·∫£nh (DPI)", 72, 300, 150)
    convert_btn = st.button("üöÄ Chuy·ªÉn ƒë·ªïi")

def doc_to_pdf(doc_path, pdf_path):
    # Chuy·ªÉn doc sang html r·ªìi in ra pdf (c√°ch ƒë∆°n gi·∫£n v·ªõi Linux ho·∫∑c Streamlit Cloud)
    with open(doc_path, "rb") as doc_file:
        result = mammoth.convert_to_html(doc_file)
        html = result.value
    # L∆∞u html ra file t·∫°m
    html_path = doc_path.replace(".doc", ".html")
    with open(html_path, "w", encoding="utf-8") as f:
        f.write(html)
    # D√πng pandas ho·∫∑c th∆∞ vi·ªán kh√°c ƒë·ªÉ chuy·ªÉn html sang pdf, ho·∫∑c d√πng convert b·∫±ng tay n·∫øu m√¥i tr∆∞·ªùng cho ph√©p
    # ·ªû ƒë√¢y b·∫°n n√™n chuy·ªÉn file .doc sang .docx tr∆∞·ªõc khi upload ƒë·ªÉ ƒë·∫°t ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t

if convert_btn and uploaded_file:
    st.success(f"‚úÖ ƒêang x·ª≠ l√Ω file {uploaded_file.name} ...")
    temp_dir = tempfile.mkdtemp()
    output_files = []

    file_name = uploaded_file.name.lower()
    file_ext = os.path.splitext(file_name)[1]

    # ==== Word (.docx, .doc) ho·∫∑c PDF ====
    if file_ext in [".docx", ".doc", ".pdf"]:
        # N·∫øu l√† Word .docx: chuy·ªÉn sang PDF
        if file_ext == ".docx":
            with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as tmp_docx:
                tmp_docx.write(uploaded_file.read())
                docx_path = tmp_docx.name
            pdf_path = os.path.join(temp_dir, "converted.pdf")
            docx2pdf_convert(docx_path, pdf_path)
        # N·∫øu l√† Word .doc: d√πng mammoth chuy·ªÉn sang html r·ªìi pdf (khuy·∫øn ngh·ªã chuy·ªÉn .doc sang .docx tr∆∞·ªõc khi upload)
        elif file_ext == ".doc":
            with tempfile.NamedTemporaryFile(delete=False, suffix=".doc") as tmp_doc:
                tmp_doc.write(uploaded_file.read())
                doc_path = tmp_doc.name
            # Chuy·ªÉn .doc sang html
            with open(doc_path, "rb") as doc_file:
                result = mammoth.convert_to_html(doc_file)
                html = result.value
            # L∆∞u html ra file t·∫°m
            html_path = os.path.join(temp_dir, "converted.html")
            with open(html_path, "w", encoding="utf-8") as f:
                f.write(html)
            # Chuy·ªÉn html sang pdf b·∫±ng pandas (ho·∫∑c b·∫°n c√≥ th·ªÉ render html ra ·∫£nh tr·ª±c ti·∫øp)
            # ·ªû ƒë√¢y b·∫°n n√™n chuy·ªÉn file .doc sang .docx tr∆∞·ªõc khi upload ƒë·ªÉ ƒë·∫°t ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t!
            st.warning("Vui l√≤ng chuy·ªÉn file .doc sang .docx ƒë·ªÉ ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng chuy·ªÉn ƒë·ªïi t·ªët nh·∫•t.")
            pdf_path = None
        elif file_ext == ".pdf":
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_pdf:
                tmp_pdf.write(uploaded_file.read())
                pdf_path = tmp_pdf.name

        # ƒê·ªçc PDF v√† chuy·ªÉn t·ª´ng trang th√†nh ·∫£nh
        if pdf_path and os.path.exists(pdf_path):
            pdf = fitz.open(pdf_path)
            for page_num in range(len(pdf)):
                page = pdf[page_num]
                pix = page.get_pixmap(dpi=dpi)
                img_path = os.path.join(temp_dir, f"page_{page_num+1}.{img_format.lower()}")
                pix.save(img_path)
                output_files.append(img_path)

    # ==== Excel (.xls, .xlsx) ====
    elif file_ext in [".xls", ".xlsx"]:
        with tempfile.NamedTemporaryFile(delete=False, suffix=file_ext) as tmp:
            tmp.write(uploaded_file.read())
            excel_path = tmp.name
        xls = pd.ExcelFile(excel_path)
        for sh in xls.sheet_names:
            df = pd.read_excel(excel_path, sheet_name=sh)
            fig, ax = plt.subplots(figsize=(8, 4))
            ax.axis('off')
            ax.table(cellText=df.values, colLabels=df.columns, loc='center')
            plt.tight_layout()
            img_path = os.path.join(temp_dir, f"{sh}.{img_format.lower()}")
            plt.savefig(img_path, dpi=dpi)
            plt.close(fig)
            output_files.append(img_path)

    # ==== T·∫£i t·ª´ng ·∫£nh ====
    st.subheader("üì• T·∫£i ·∫£nh k·∫øt qu·∫£")
    for f in output_files:
        with open(f, "rb") as file:
            st.download_button(
                label=f"T·∫£i {os.path.basename(f)}",
                data=file,
                file_name=os.path.basename(f),
                mime="image/"+img_format.lower()
            )

    # ==== T·∫£i t·∫•t c·∫£ (ZIP) ====
    if output_files:
        zip_path = os.path.join(temp_dir, "all_images.zip")
        with zipfile.ZipFile(zip_path, "w") as zf:
            for f in output_files:
                zf.write(f, os.path.basename(f))
        with open(zip_path, "rb") as f:
            st.download_button(
                label="üì¶ T·∫£i t·∫•t c·∫£ ·∫£nh (ZIP)",
                data=f,
                file_name="all_images.zip",
                mime="application/zip"
            )
    else:
        st.error("Kh√¥ng c√≥ ·∫£nh n√†o ƒë·ªÉ t·∫£i v·ªÅ!")
